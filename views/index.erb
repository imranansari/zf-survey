<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
  <title>Web App Template</title>

  <link href="css/survey.css" rel="stylesheet" type="text/css">


  <script language="javascript">
      var theScroll;
      function scroll() {
          theScroll = new iScroll('wrapper');
      }
      document.addEventListener('DOMContentLoaded', scroll, false);
  </script>
</head>

<body>

<header>
  Zaytoon Survey
</header>

<div id="wrapper">
  <div id="scroll-content">
    In the past, you've likely come across or used Ruby on Rails (RoR) - a popular web application framework for the
    Ruby programming language that helps organize applications using the MVC pattern. Sinatra is a much smaller, more
    light-weight alternative to it.

    Whilst a very basic Rails application may require a more strict project structure (such as requiring the use of
    controllers, views and routing etc.), Sinatra doesn't require as many of these dependencies, sacrificing the helpers
    needed to connect to databases, tools to create forms or any of the other utilities Rails comes with out of the box.

    What Sinatra does have is a minimal set of features most useful for tying specific URLs and RESTful HTTP actions to
    blocks of Ruby code and returning this code's output as a response. Sinatra is particularly useful for getting
    projects up and running quickly where we don't have a need for the extra pieces RoR provides.

    For those who are familiar with more Rails, you probably know that it requires a separate routes file to define how
    an application should be responding to requests. These are then piped into the relevant models and controllers as
    needed.

    Sinatra takes a more straight-forward approach, providing us with the most simple path to handling routing. By
    declaring get,post, put or delete actions, we can inform Sinatra to add a new route, which we can then have respond
    to requests.

    The framework is particularly useful for writing APIs, widgets and small-scale applications that can power the
    backend of a client-heavy application. As mentioned, we will be using it to power our API.

    In the past, you've likely come across or used Ruby on Rails (RoR) - a popular web application framework for the
    Ruby programming language that helps organize applications using the MVC pattern. Sinatra is a much smaller, more
    light-weight alternative to it.

    Whilst a very basic Rails application may require a more strict project structure (such as requiring the use of
    controllers, views and routing etc.), Sinatra doesn't require as many of these dependencies, sacrificing the helpers
    needed to connect to databases, tools to create forms or any of the other utilities Rails comes with out of the box.

    What Sinatra does have is a minimal set of features most useful for tying specific URLs and RESTful HTTP actions to
    blocks of Ruby code and returning this code's output as a response. Sinatra is particularly useful for getting
    projects up and running quickly where we don't have a need for the extra pieces RoR provides.

    For those who are familiar with more Rails, you probably know that it requires a separate routes file to define how
    an application should be responding to requests. These are then piped into the relevant models and controllers as
    needed.

    Sinatra takes a more straight-forward approach, providing us with the most simple path to handling routing. By
    declaring get,post, put or delete actions, we can inform Sinatra to add a new route, which we can then have respond
    to requests.

    The framework is particularly useful for writing APIs, widgets and small-scale applications that can power the
    backend of a client-heavy application. As mentioned, we will be using it to power our API.

    In the past, you've likely come across or used Ruby on Rails (RoR) - a popular web application framework for the
    Ruby programming language that helps organize applications using the MVC pattern. Sinatra is a much smaller, more
    light-weight alternative to it.

    Whilst a very basic Rails application may require a more strict project structure (such as requiring the use of
    controllers, views and routing etc.), Sinatra doesn't require as many of these dependencies, sacrificing the helpers
    needed to connect to databases, tools to create forms or any of the other utilities Rails comes with out of the box.

    What Sinatra does have is a minimal set of features most useful for tying specific URLs and RESTful HTTP actions to
    blocks of Ruby code and returning this code's output as a response. Sinatra is particularly useful for getting
    projects up and running quickly where we don't have a need for the extra pieces RoR provides.

    For those who are familiar with more Rails, you probably know that it requires a separate routes file to define how
    an application should be responding to requests. These are then piped into the relevant models and controllers as
    needed.

    Sinatra takes a more straight-forward approach, providing us with the most simple path to handling routing. By
    declaring get,post, put or delete actions, we can inform Sinatra to add a new route, which we can then have respond
    to requests.

    The framework is particularly useful for writing APIs, widgets and small-scale applications that can power the
    backend of a client-heavy application. As mentioned, we will be using it to power our API.


  </div>
</div>

<footer>
  <button>Yes</button>
  <button>No</button>
</footer>

<script type="text/javascript" src="/javascripts/iscroll-lite.js"></script>
</body>
</html>â€‹